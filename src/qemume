#!/bin/bash

qemumeDir=~/.local/share/qemume/
vmsDir=$qemumeDir/vms/
mkdir -p $qemumeDir $vmsDir

# main menu
mainMenu(){
menu=`dialog --menu qemume 0 0 0 1 "Create VM" 2 "Managing Existing VM's"  3 "Quit" --stdout`
if [ $menu == '1' ]; then
  createVM
elif [ $menu == '2' ]; then
  manageVMs
fi
}

createVM(){
# {{{
vmName=`dialog --inputbox "Name of The VM" 0 0 --stdout`
while :
do
if [ ! -d "$vmsDir$vmName" ]; then
  mkdir "$vmsDir$vmName"
  break
else
  vmName=`dialog --inputbox "$vmName already exists please type new vm name" 0 0 --stdout`
fi
done
driveSize=`dialog --inputbox "Drive Size in Gigabyte" 0 0 10 --stdout`
ramSize=`dialog --inputbox "RAM Size in Gigabyte" 0 0 1 --stdout`
cores=`dialog --inputbox "Number of Physical Cores" 0 0 2 --stdout`
threads=`dialog --inputbox "Number of Threads" 0 0 2 --stdout`

# creating the drive
qemu-img create -f qcow2 "$vmsDir$vmName/hdd.img" "$driveSize"G

# asking if the user want to attach an iso file
dialog --yesno "attach an iso file" 0 0 --stdout && isofile=`dialog --inputbox "iso file path" 0 0 --stdout`

# making the config file 
echo -e "vmName=$vmName\nramSize=$ramSize\ncores=$cores\nthreads=$threads\nisofile=$isofile" > $vmsDir$vmName/config
wait
mainMenu
# }}}
}

deleteVM(){
# {{{
dialog --yesno "are you sure you want to delete the vm" 0 0 --stdout && rm -rf $vmsDir$vmSelect
# }}}
}

manageVMs(){
# {{{
vms=`'ls' $vmsDir`
vmsWithTags=`id=1 ; for vm in $vms ; do printf "$vm $id " ; id=$(($id+1)); done`

vmSelect=`dialog --menu qemume 0 0 0 $vmsWithTags --stdout`
actionSelect=`dialog --menu "$vmSelect" 0 0 0 1 "Launch The VM" 2 "Delete The VM" --stdout`
case $actionSelect in
  "1")
    launchVM ;;
  "2")
    deleteVM ;;
esac

wait
mainMenu
# }}}
}

mainMenu
# vim: fdm=marker
